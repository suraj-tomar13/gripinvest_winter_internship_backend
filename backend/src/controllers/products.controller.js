const pool = require('../services/db.service');

const autoGenerateDescription = (product) => {
    return `This product, "${product.name}", is a ${product.investment_type} investment with a tenure of ${product.tenure_months} months. It offers an attractive annual yield of ${product.annual_yield}% and is categorized as a ${product.risk_level} risk investment.`;
};

exports.createProduct = async (req, res) => {
    const { name, investment_type, tenure_months, annual_yield, risk_level, min_investment, max_investment } = req.body;
    const description = autoGenerateDescription(req.body);

    try {
        const [result] = await pool.execute(
            `INSERT INTO investment_products (name, investment_type, tenure_months, annual_yield, risk_level, min_investment, max_investment, description) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
            [name, investment_type, tenure_months, annual_yield, risk_level, min_investment, max_investment, description]
        );
        res.status(201).json({ message: 'Product created successfully', productId: result.insertId });
    } catch (error) {
        res.locals.errorMessage = 'Failed to create product';
        res.status(500).json({ error: 'Failed to create product', message: error.message });
    }
};

exports.updateProduct = async (req, res) => {
    const { id } = req.params;
    const updates = req.body;
    const fields = Object.keys(updates).map(key => `${key} = ?`).join(', ');
    const values = Object.values(updates);
    values.push(id);

    try {
        const [result] = await pool.execute(`UPDATE investment_products SET ${fields} WHERE id = ?`, values);
        if (result.affectedRows === 0) {
            res.locals.errorMessage = 'Product not found';
            return res.status(404).json({ error: 'Product not found' });
        }
        res.status(200).json({ message: 'Product updated successfully' });
    } catch (error) {
        res.locals.errorMessage = 'Failed to update product';
        res.status(500).json({ error: 'Failed to update product', message: error.message });
    }
};

exports.deleteProduct = async (req, res) => {
    const { id } = req.params;
    try {
        const [result] = await pool.execute(`DELETE FROM investment_products WHERE id = ?`, [id]);
        if (result.affectedRows === 0) {
            res.locals.errorMessage = 'Product not found';
            return res.status(404).json({ error: 'Product not found' });
        }
        res.status(200).json({ message: 'Product deleted successfully' });
    } catch (error) {
        res.locals.errorMessage = 'Failed to delete product';
        res.status(500).json({ error: 'Failed to delete product', message: error.message });
    }
};

exports.getProducts = async (req, res) => {
    try {
        const [rows] = await pool.execute(`SELECT * FROM investment_products`);
        res.status(200).json({ products: rows });
    } catch (error) {
        res.locals.errorMessage = 'Failed to fetch products';
        res.status(500).json({ error: 'Failed to fetch products', message: error.message });
    }
};