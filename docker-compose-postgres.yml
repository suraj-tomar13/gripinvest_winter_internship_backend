services:
  # PostgreSQL Database (alternative to MySQL)
  postgres:
    image: postgres:15
    container_name: gripinvest-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gripinvest
      POSTGRES_USER: gripinvest
      POSTGRES_PASSWORD: gripinvest123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
    networks:
      - gripinvest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gripinvest -d gripinvest"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build: ./backend
    container_name: gripinvest-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_USER: gripinvest
      DB_PASSWORD: gripinvest123
      DB_DATABASE: gripinvest
      DB_TYPE: postgres
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gripinvest-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend React App
  frontend:
    build: ./frontend
    container_name: gripinvest-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - gripinvest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:

networks:
  gripinvest-network:
    driver: bridge
